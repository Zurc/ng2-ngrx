import 'rxjs/add/observable/merge';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/distinctUntilChanged';
import { StoreDevtools } from '@ngrx/store-devtools';
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';
import { DockActions } from './actions';
export var DockMonitorComponent = (function () {
    function DockMonitorComponent(tools, actions) {
        var _this = this;
        this.tools = tools;
        this.actions = actions;
        this.state$ = this.tools.liftedState.map(function (s) { return s.monitorState; });
        this.visible$ = this.state$.map(function (s) { return s.visible; }).distinctUntilChanged();
        this.position$ = this.state$.map(function (s) { return s.position; }).distinctUntilChanged();
        this.size$ = this.state$.map(function (s) { return s.size; }).distinctUntilChanged();
        this.toggle$ = new Subject();
        this.toggleAction$ = this.toggle$
            .map(function () { return _this.actions.toggleVisibility(); });
        this.changePosition$ = new Subject();
        this.positionAction$ = this.changePosition$
            .map(function () { return _this.actions.changePosition(); });
        Observable
            .merge(this.toggleAction$, this.positionAction$)
            .subscribe(this.tools);
    }
    /** @nocollapse */
    DockMonitorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dock-monitor',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <ngrx-commander [shortcut]=\"toggleCommand\" (command)=\"toggle$.next($event)\"></ngrx-commander>\n    <ngrx-commander [shortcut]=\"positionCommand\" (command)=\"changePosition$.next($event)\"></ngrx-commander>\n\n    <ngrx-dock [visible]=\"visible$ | async\" [position]=\"position$ | async\" [size]=\"size$ | async\">\n      <ng-content></ng-content>\n    </ngrx-dock>\n  "
                },] },
    ];
    /** @nocollapse */
    DockMonitorComponent.ctorParameters = [
        { type: StoreDevtools, },
        { type: DockActions, },
    ];
    /** @nocollapse */
    DockMonitorComponent.propDecorators = {
        'toggleCommand': [{ type: Input },],
        'positionCommand': [{ type: Input },],
    };
    return DockMonitorComponent;
}());
